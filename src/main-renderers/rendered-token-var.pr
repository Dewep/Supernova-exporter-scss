{*

Injectable blueprint that represents full token as key: value to be used inside :root {} declarations.

Source data: Token Metadata and Payload, all types (https://developers.supernova.io/design-system-data/tokens)
Note: Token is passed as `context` property because it is injected

{
  "context": {
    "id": string
    "name": string
    "description": string
    "tokenType": Depends on the token type
    "origin": ItemOrigin | null
    "value": Depends on the token type
  }
}


Rendered as:

  --[name]: [value];

*}
{[ let token = context /]}
{[ inject "rendered-description" context token /]}
${[ inject "rendered-name" context token /]}: {[ inject "rendered-value" context token /]};

{[ if (token.tokenType == "Color") ]}
{[ let themeId = "a78c211e-c104-43c2-98dc-7216a8624f0f" /]}
{[ let themedToken = ds.tokensByApplyingThemes([context.id], [themeId]) /]}
{[ let theme = ds.themeById(themeId) /]}
${[ inject "rendered-name" context token /]}{{ theme.name }}{{ theme.codeName }}: {[ inject "rendered-value" context themedToken[0] /]};
{[/]}
{* debugkeys(theme) id,versionedId,brandId,designSystemVersionId,name,description,codeName,createdAt,updatedAt,overriddenTokens *}
{* themedToken: id,versionedId,brandId,themeId,designSystemVersionId,name,description,tokenType,origin,parent,createdAt,updatedAt,sortOrder,properties,propertyValues,value,shadowLayers,isVirtual *}

